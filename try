import { useWeb3React } from '@web3-react/core';
import { Contract, ethers, Signer, utils } from 'ethers';
import {
  ChangeEvent,
  MouseEvent,
  ReactElement,
  useEffect,
  useState
} from 'react';
import styled from 'styled-components';
import GreeterArtifact from '../artifacts/contracts/Greeter.sol/Greeter.json';
import HuskyArtifact from '../artifacts/contracts/HuskyToken.sol/HuskyToken.json';
import ERC20Artifact from '../artifacts/contracts/HuskyERC.sol/HuskyERC.json';
import DutchAuctionArtifact from '../artifacts/contracts/DutchAuctions.sol/DutchAuctions.json';
import ProxyAuctionArtifact from '../artifacts/contracts/TransparentUpgradeableProxy.sol/TransparentUpgradeableProxy.json';
import { HardhatRuntimeEnvironment } from 'hardhat/types';
import { Provider } from '../utils/provider';
import { getAddress } from 'ethers/lib/utils';
const StyledDeployContractButton = styled.button`
  width: 180px;
  height: 2rem;
  border-radius: 1rem;
  border-color: blue;
  cursor: pointer;
  place-self: center;
`;
const StyledGreetingDiv = styled.div`
  display: grid;
  grid-template-rows: 1fr 1fr 1fr;
  grid-template-columns: 135px 2.7fr 1fr;
  grid-gap: 10px;
  place-self: center;
  align-items: center;
`;
const StyledLabel = styled.label`
  font-weight: bold;
`;
const StyledInput = styled.input`
  padding: 0.4rem 0.6rem;
  line-height: 2fr;
`;
const StyledButton = styled.button`
  width: 150px;
  height: 2rem;
  border-radius: 1rem;
  border-color: blue;
  cursor: pointer;
`;
export function Greeter(): ReactElement {
  const context = useWeb3React<Provider>();
  const { library, active } = context;
  const [signer, setSigner] = useState<Signer>();
  const [greeterContract, setGreeterContract] = useState<Contract>();
  const [dutchAuctionContract, setDutchAuctionContract] = useState<Contract>();
  const [erc20Contracts, setErc20Contracts] = useState<Contract>();
  const [huskyContract, setHuskyContract] = useState<Contract>();
  const [greeterContractAddr, setGreeterContractAddr] = useState<string>('');
  const [huskyContractAddr, setHuskyContractAddr] = useState<string>('');
  const [erc20ContractAddr, setERC20ContractAddr] = useState<string>();
  const [dutchAuctionContractAddress, setDutchAuctionContractAddress] =
    useState<string>();
  const [greeting, setGreeting] = useState<string>('');
  const [greetingInput, setGreetingInput] = useState<string>('');
  // Extra input to handle from the event
  const [nftId, setNFTId] = useState<string>('');
  const [reservePriceInput, setReservePriceInput] = useState<string>('');
  const [numberOfBlockInput, setNumberOfBlockInput] = useState<string>('');
  const [offerPriceDecrementInput, setOfferPriceDecrementInput] =
    useState<string>('');
  const [totalNumberOfTokenInput, setTotalNumberOfTokenInput] =
    useState<string>('');
  const [bidAmountInput, setBidAmountInput] = useState<string>('');
  const [auctionWinner, setAuctionWinner] = useState<string>('');
  const [creationPrice, setCreationPrice] = useState<string>('');
  const [owner, setOwner] = useState<string>('');
  useEffect((): void => {
    if (!library) {
      setSigner(undefined);
      return;
    }
    setSigner(library.getSigner());
  }, [library]);
  // useEffect((): void => {
  //   if (!greeterContract) {
  //     return;
  //   }
  //   async function getGreeting(greeterContract: Contract): Promise<void> {
  //     const _greeting = await greeterContract.greet();
  //     if (_greeting !== greeting) {
  //       setGreeting(_greeting);
  //     }
  //   }
  //   getGreeting(greeterContract);
  // }, [greeterContract, greeting]);
  function handleDeployContract(event: MouseEvent<HTMLButtonElement>) {
    event.preventDefault();
    // only deploy the Greeter contract one time, when a signer is defined
    // if (greeterContract || !signer || dutchAuctionContract) {
    if (!signer) {
      window.alert('No Signer.');
      console.log('No Signer.');
      return;
    }
    async function deployGreeterContract(signer: Signer): Promise<void> {
      // const Greeter = new ethers.ContractFactory(
      //   GreeterArtifact.abi,
      //   GreeterArtifact.bytecode,
      //   signer
      // );
      const HuskyMint = new ethers.ContractFactory(
        HuskyArtifact.abi,
        HuskyArtifact.bytecode,
        signer
      );
      const ERC20 = new ethers.ContractFactory(
        ERC20Artifact.abi,
        ERC20Artifact.bytecode,
        signer
      );
      const DutchAuction = new ethers.ContractFactory(
        DutchAuctionArtifact.abi,
        DutchAuctionArtifact.bytecode,
        signer
      );
      const ProxyFactory = new ethers.ContractFactory(
        ProxyAuctionArtifact.abi,
        ProxyAuctionArtifact.bytecode,
        signer
      );
      try {
        // const greeterContract = await Greeter.deploy('Hello, World!');
        // await greeterContract.deployed();
        // transferring the ERC20
        const erc20Contract = await ERC20.deploy(100000);
        await erc20Contract.deployed();
        erc20Contract.transfer(
          '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',
          100000000
        );
        erc20Contract.transfer(
          '0x976EA74026E726554dB657fA54763abd0C3a0aa9',
          100000000
        );
        setErc20Contracts(erc20Contract);
        const huskyContract = await HuskyMint.deploy();
        await huskyContract.deployed();
        const testing = await huskyContract.safeMint(signer.getAddress());
        console.log(testing);
        setNFTId(testing.v);
        console.log('NFT Token ID: ' + testing.v);
        setHuskyContract(huskyContract);
        // // Minting ERC 20
        // const testing = await huskyContract.safeMint();
        // // await greeterContract.deployed();
        // // await huskyContract.deployed();
        // const greeting = await greeterContract.greet();
        // console.log(erc20Contract.address);
        // console.log(huskyContract.address);
        setERC20ContractAddr(erc20Contract.address);
        setHuskyContractAddr(huskyContract.address);
        const dutchAuctionContract = await DutchAuction.deploy(
          erc20Contract.address,
          huskyContract.address,
          testing.v,
          reservePriceInput,
          numberOfBlockInput,
          offerPriceDecrementInput
        );
        await dutchAuctionContract.deployed();
        // const creationBlock = await greeterContract.getReservePrice();
        // const numberOfBlock = await greeterContract.getNumBlocksOpen();
        // const offerPriceDecrement =
        //   await greeterContract.getOfferPriceDecrement();
        // const owner = await greeterContract.getAddressOfOwner();
        // dutch auction setup
        // setting up the dutchAuction contract address
        huskyContract.approve(dutchAuctionContract.address, testing.v);
        setDutchAuctionContractAddress(dutchAuctionContract.address);
        setDutchAuctionContract(dutchAuctionContract);
        const creationBlock = await dutchAuctionContract.getPrice();
        const owner = await dutchAuctionContract.getAddressOfOwner();
        setCreationPrice(creationBlock.toString());
        setOwner(owner);
        // setGreeterContract(greeterContract);
        // setGreeting(greeting);
        // window.alert(`Greeter deployed to: ${greeterContract.address}`);
        // window.alert(`ERC20 deployed to: ${erc20Contract.address}`);
        // window.alert(
        //   `HuskyMint ERC721 address deployed to: ${huskyContract.address}`
        // );
        window.alert(
          'Dutch Auction deployed to: ' + dutchAuctionContract.address
        );
        // setGreeterContractAddr(greeterContract.address);
        setDutchAuctionContractAddress(dutchAuctionContract.address);
      } catch (error: any) {
        window.alert(
          'Error!' + (error && error.message ? `\n\n${error.message}` : '')
        );
      }
    }
    deployGreeterContract(signer);
  }
  // function handleGreetingChange(event: ChangeEvent<HTMLInputElement>): void {
  //   event.preventDefault();
  //   setGreetingInput(event.target.value);
  // }
  function handleReservePriceChange(
    event: ChangeEvent<HTMLInputElement>
  ): void {
    event.preventDefault();
    setReservePriceInput(event.target.value);
  }
  function handleNumberOfBlockOpenChange(
    event: ChangeEvent<HTMLInputElement>
  ): void {
    event.preventDefault();
    setNumberOfBlockInput(event.target.value);
  }
  function handleOfferPriceDecrementChange(
    event: ChangeEvent<HTMLInputElement>
  ): void {
    event.preventDefault();
    setOfferPriceDecrementInput(event.target.value);
  }
  function handleTotalTokens(event: ChangeEvent<HTMLInputElement>): void {
    event.preventDefault();
    setTotalNumberOfTokenInput(event.target.value);
  }
  // function handleBidAddressInput(event: ChangeEvent<HTMLInputElement>): void {
  //   event.preventDefault();
  //   setBidAddressInput(event.target.value);
  // }
  function handleBidAmountInput(event: ChangeEvent<HTMLInputElement>): void {
    event.preventDefault();
    setBidAmountInput(event.target.value);
  }
  async function handleGreetingSubmit(
    event: MouseEvent<HTMLButtonElement>
  ): Promise<void> {
    event.preventDefault();
    // if (!greeterContract) {
    //   window.alert('Undefined greeterContract');
    //   return;
    // }
    if (!signer) {
      window.alert('No Signer.');
      return;
    }
    if (!dutchAuctionContract) {
      window.alert('Undefined DutchAuctionContract');
      return;
    }
    if (owner === (await signer.getAddress())) {
      window.alert('Owner cant bid.');
      return;
    }
    // if (!greetingInput) {
    //   window.alert('Greeting cannot be empty');
    //   return;
    // }
    // if (!erc721Input) {
    //   window.alert('ERC721 address cannot be empty');
    //   return;
    // }
    // if (!erc20Input) {
    //   window.alert('ERC20 address cannot be empty');
    //   return;
    // }
    // if (!nftIdInput) {
    //   window.alert('NFT ID cannot be empty');
    //   return;
    // }
    // if (!reservePriceInput) {
    //   window.alert('Reserve price cannot be empty');
    //   return;
    // }
    // if (!numberOfBlockInput) {
    //   window.alert('Number of blocks cannot be empty');
    //   return;
    // }
    // if (!offerPriceDecrementInput) {
    //   window.alert('Offer price decrement cannot be empty');
    //   return;
    // }
    // if (!totalNumberOfTokenInput) {
    //   window.alert('Total number of tokens cannot be empty');
    //   return;
    // }
    async function submitGreeting(
      signer: Signer,
      dutchAuctionContract: Contract
    ): Promise<void> {
      // handling the ERC20
      try {
        if (!erc20Contracts) {
          return;
        }
        // // Handling the approve function of the contract
        // await erc20Contracts.transfer(
        //   dutchAuctionContractAddress,
        //   bidAmountInput
        // );
        await erc20Contracts.approve(
          dutchAuctionContractAddress,
          bidAmountInput
        );
      } catch (error: any) {
        window.alert(
          'Error!' + (error && error.message ? `\n\n${error.message}` : '')
        );
      }
      try {
        try {
          const bid = await dutchAuctionContract
            .connect(signer)
            .bid(bidAmountInput);
          console.log('before await');
          await bid.wait();
          console.log('The bid', bid);
        } catch (error: any) {
          window.alert(
            'Error! New' +
              (error && error.message ? `\n\n${error.message}` : '')
          );
        }
        setAuctionWinner(await dutchAuctionContract.getWinnerAddress());
      } catch (error: any) {
        window.alert(
          'Error! old' + (error && error.message ? `\n\n${error.message}` : '')
        );
      }
    }
    submitGreeting(signer, dutchAuctionContract);
  }
  // async function handleSellNFT(
  //   event: MouseEvent<HTMLButtonElement>
  // ): Promise<void> {
  //   event.preventDefault();
  //   if (!signer) {
  //     window.alert('No Signer.');
  //     return;
  //   }
  //   if (!dutchAuctionContract) {
  //     window.alert('Undefined DutchAuctionContract');
  //     return;
  //   }
  //   if (owner !== (await signer.getAddress())) {
  //     window.alert('Only owner can sell NFT');
  //     return;
  //   }
  //   async function sellNFT(
  //     signer: Signer,
  //     dutchAuctionContract: Contract
  //   ): Promise<void> {
  //     try {
  //       try {
  //         const sell = await dutchAuctionContract.connect(signer).sell();
  //         await sell.wait();
  //         console.log('The sell', sell);
  //       } catch (error: any) {
  //         window.alert(
  //           'Error! New' +
  //             (error && error.message ? `\n\n${error.message}` : '')
  //         );
  //       }
  //       setAuctionWinner(await dutchAuctionContract.getWinnerAddress());
  //     } catch (error: any) {
  //       window.alert(
  //         'Error! old' + (error && error.message ? `\n\n${error.message}` : '')
  //       );
  //     }
  //   }
  //   sellNFT(signer, dutchAuctionContract);
  // }
  return (
    <>
      <div className="flex flex-row ">
        <div
          className=" flex flex-1 justify-center items-center
    bg-gradient-to-br from-purple-700 to-amber-700"
        >
          <form
            className="p-10 bg-white rounded-xl drop-shadow-lg space-y-5"
            action=""
          >
            <h1 className="text-center text-3xl">Dutch Auction</h1>
            <div className="flex flex-col space-y-2">
              <label className="text-sm font-light" htmlFor="email">
                ERC721 Address
              </label>
              <input
                className="w-96 px-3 py-2 rounded-md border border-slate-400"
                type="text"
                placeholder=""
                name="email"
                id="erc721"
                value={
                  erc20ContractAddr
                    ? erc20ContractAddr
                    : `<Contract not yet deployed>`
                }
              />
            </div>
            <div className="flex flex-col space-y-2">
              <label className="text-sm font-light" htmlFor="password">
                ERC20 Address
              </label>
              <input
                className="w-96 px-3 py-2 rounded-md border border-slate-400"
                type="text"
                placeholder="0x00000000000000000"
                name="password"
                id="password"
                value={
                  huskyContractAddr
                    ? huskyContractAddr
                    : `<Contract not yet deployed>`
                }
              />
            </div>
            <div className="flex flex-col space-y-2">
              <label className="text-sm font-light" htmlFor="password">
                Token ID
              </label>
              <input
                className="w-96 px-3 py-2 rounded-md border border-slate-400"
                type="text"
                placeholder="1"
                name="pasword"
                id="password"
                value={nftId ? nftId : `<NFT is not minted yet>`}
              />
            </div>
            <div className="flex flex-col space-y-2">
              <label className="text-sm font-light" htmlFor="password">
                Reverse Price
              </label>
              <input
                className="w-96 px-3 py-2 rounded-md border border-slate-400"
                type="text"
                placeholder="1"
                onChange={handleReservePriceChange}
              />
            </div>
            <div className="flex flex-col space-y-2">
              <label className="text-sm font-light" htmlFor="password">
                Number of blocks open for auction
              </label>
              <input
                className="w-96 px-3 py-2 rounded-md border border-slate-400"
                type="text"
                placeholder="1000"
                onChange={handleNumberOfBlockOpenChange}
              />
            </div>
            <div className="flex flex-col space-y-2">
              <label className="text-sm font-light" htmlFor="password">
                Offer price decrement
              </label>
              <input
                className="w-96 px-3 py-2 rounded-md border border-slate-400"
                type="text"
                placeholder="20"
                onChange={handleOfferPriceDecrementChange}
              />
            </div>
            <div className="flex flex-col space-y-2">
              <label className="text-sm font-light" htmlFor="password">
                Total number of tokens
              </label>
              <input
                className="w-96 px-3 py-2 rounded-md border border-slate-400"
                type="text"
                placeholder="1200"
                onChange={handleTotalTokens}
              />
            </div>
            <button
              className="w-full px-10 py-2 bg-buttonColor text-white   rounded-md
            hover:bg-blue-500 hover:drop-shadow-md duration-300 ease-in"
              type="submit"
              disabled={!active || dutchAuctionContract ? true : false}
              style={{
                cursor:
                  !active || dutchAuctionContract ? 'not-allowed' : 'pointer',
                borderColor: !active || dutchAuctionContract ? 'unset' : 'blue'
              }}
              onClick={handleDeployContract}
            >
              Deploy DutchAuction Contract
            </button>
          </form>
        </div>
        <div
          className=" flex flex-1 justify-center items-center
    bg-gradient-to-br from-purple-700 to-amber-700"
        >
          <form
            className="p-10 bg-white rounded-xl drop-shadow-lg space-y-5"
            action=""
          >
            <h1 className="text-center text-3xl">Bidding For The Contracts</h1>
            <div className="flex flex-col space-y-2">
              <label className="text-sm font-light" htmlFor="email">
                Dutch Contract Address
              </label>
              <input
                className="w-96 px-3 py-2 rounded-md border border-slate-400"
                type="text"
                placeholder="0x00000000000000000"
                name="email"
                id="erc721"
                value={
                  dutchAuctionContractAddress
                    ? dutchAuctionContractAddress
                    : `<Contract not yet deployed>`
                }
              />
            </div>
            <div className="flex flex-col space-y-2">
              <label className="text-sm font-light" htmlFor="email">
                Creation Block Price
              </label>
              {creationPrice ? creationPrice : `<Deploy your contract>`}
            </div>
            <div className="flex flex-col space-y-2">
              <label className="text-sm font-light" htmlFor="email">
                Amount of bid
              </label>
              <input
                className="w-96 px-3 py-2 rounded-md border border-slate-400"
                type="number"
                placeholder="Enter bid amount"
                name="number"
                id="bid_amount"
                onChange={handleBidAmountInput}
              />
            </div>
            <div className="flex flex-col space-y-2">
              <label className="text-sm font-light" htmlFor="email">
                Auction Winner
              </label>
              {auctionWinner ? auctionWinner : `<No winner yet>`}
            </div>
            <button
              className="w-full px-10 py-2 bg-buttonColor text-white   rounded-md
            hover:bg-blue-500 hover:drop-shadow-md duration-300 ease-in"
              type="submit"
              onClick={handleGreetingSubmit}
            >
              Submit Bid
            </button>
            {/* <button
              className="w-full px-10 py-2 bg-buttonColor text-white   rounded-md
            hover:bg-blue-500 hover:drop-shadow-md duration-300 ease-in"
              type="submit"
              onClick={handleSellNFT}
            >
              Sell NFT
            </button>
            <button
              className="w-full px-10 py-2 bg-buttonColor text-white   rounded-md
            hover:bg-blue-500 hover:drop-shadow-md duration-300 ease-in"
              type="submit"
              onClick={showOwner}
            >
              Owner of the NFT
            </button> */}
          </form>
        </div>
      </div>
    </>
  );
}